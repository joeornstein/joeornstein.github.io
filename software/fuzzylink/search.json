[{"path":"https://joeornstein.github.io/software/fuzzylink/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Ornstein. Author, maintainer.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ornstein J (2024). fuzzylink: Probabilistic Record Linkage Using PreTrained Text Embeddings. R package version 0.1.2.","code":"@Manual{,   title = {fuzzylink: Probabilistic Record Linkage Using PreTrained Text Embeddings},   author = {Joe Ornstein},   year = {2024},   note = {R package version 0.1.2}, }"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"fuzzylink","dir":"","previous_headings":"","what":"Probabilistic Record Linkage Using PreTrained Text Embeddings","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"R package fuzzylink implements probabilistic record linkage procedure proposed Ornstein (2024). method allows users merge datasets fuzzy matches key identifying variable. Suppose, example, following two datasets: like procedure correctly identifies records dfB likely matches record dfA. fuzzylink() function performs record linkage single line code. procedure works using pretrained text embeddings construct measure similarity pair names. similarity measures used predictors statistical model estimate probability two name pairs represent entity. guide , walk step--step ’s happening hood call fuzzylink() function. See Ornstein (2024) technical details.","code":"dfA #>             name age #> 1      Joe Biden  81 #> 2   Donald Trump  77 #> 3   Barack Obama  62 #> 4 George W. Bush  77 #> 5   Bill Clinton  77 dfB #>                         name      hobby #> 1     Joseph Robinette Biden   Football #> 2         Donald John Trump        Golf #> 3       Barack Hussein Obama Basketball #> 4         George Walker Bush    Reading #> 5  William Jefferson Clinton  Saxophone #> 6 George Herbert Walker Bush  Skydiving #> 7                Biff Tannen   Bullying #> 8                  Joe Riley    Jogging library(fuzzylink) df <- fuzzylink(dfA, dfB, by = 'name', record_type = 'person') df  #>                A                         B       sim        jw #> 1      Joe Biden    Joseph Robinette Biden 0.7660045 0.7208273 #> 2   Donald Trump        Donald John Trump  0.8388933 0.9333333 #> 3   Barack Obama      Barack Hussein Obama 0.8457593 0.9200000 #> 4 George W. Bush        George Walker Bush 0.8446479 0.9301587 #> 5   Bill Clinton William Jefferson Clinton 0.8732562 0.5788889 #>   match_probability validated age      hobby #> 1                 1       Yes  81   Football #> 2                 1       Yes  77       Golf #> 3                 1       Yes  62 Basketball #> 4                 1       Yes  77    Reading #> 5                 1       Yes  77  Saxophone"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"can install development version fuzzylink GitHub : also need API access large language model (LLM). fuzzylink package currently supports OpenAI Mistral LLMs, default using OpenAI unless specified user.","code":"# install.packages(\"devtools\") devtools::install_github(\"joeornstein/fuzzylink\")"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"openai","dir":"","previous_headings":"Installation","what":"OpenAI","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"can sign account , need create API key . best performance, strongly recommend purchasing least $5 API credits, significantly increase API rate limits. account created, copy-paste API key following line R code.","code":"library(fuzzylink)  openai_api_key('YOUR API KEY GOES HERE', install = TRUE)"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"mistral","dir":"","previous_headings":"Installation","what":"Mistral","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"prefer use language models Mistral, can sign account . writing, Mistral requires purchase prepaid credits can access language models API. paid account, can create API key , copy-paste API key following line R code: Now ’re set !","code":"library(fuzzylink)  mistral_api_key('YOUR API KEY GOES HERE', install = TRUE)"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"code reproduce example make sure everything working computer. df object links presidents correct name dfB, everything running smoothly! (Note may see warning glm.fit. normal. stats package gets suspicious whenever model fit perfect.)","code":"library(tidyverse) library(fuzzylink)  dfA <- tribble(~name, ~age,                'Joe Biden', 81,                'Donald Trump', 77,                'Barack Obama', 62,                'George W. Bush', 77,                'Bill Clinton', 77)  dfB <- tribble(~name, ~hobby,                'Joseph Robinette Biden', 'Football',                'Donald John Trump ', 'Golf',                'Barack Hussein Obama', 'Basketball',                'George Walker Bush', 'Reading',                'William Jefferson Clinton', 'Saxophone',                'George Herbert Walker Bush', 'Skydiving',                'Biff Tannen', 'Bullying',                'Joe Riley', 'Jogging')  df <- fuzzylink(dfA, dfB, by = 'name', record_type = 'person')  df"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"arguments","dir":"","previous_headings":"Example","what":"Arguments","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"argument specifies name fuzzy matching variable want use link records. dataframes dfA dfB must column name. record_type argument singular noun describing type entity variable represents (e.g. “person”, “organization”, “interest group”, “city”). used part language model prompt training statistical model (see Step 3 ). instructions argument string containing additional instructions include language model prompt. Format like format instructions human research assistant, including relevant information think help model make accurate classifications. model argument specifies language model prompt. defaults OpenAI’s ‘gpt-3.5-turbo-instruct’, difficult problems can try ‘gpt-4o’. Note typically increase accuracy expense cost runtime. prefer open-source language model, try ‘open-mixtral-8x22b’. embedding_model argument specifies pretrained text embeddings use modeling match probability. defaults OpenAI’s ‘text-embedding-3-large’, also accept ‘text-embedding-3-small’ Mistral’s ‘mistral-embed’. Several parameters—including p, k, embedding_dimensions, max_validations, parallel—advanced users wish customize behavior algorithm. See package documentation details. variables must match exactly order link two records, want include blocking.variables argument. practical matter, strongly recommend including blocking variables wherever possible, reduce time cost necessary compute pairwise distance metrics. Suppose, example, two illustrative datasets column called state, want instruct fuzzylink() link people live within state. Note Donald Trump listed two different states—New York dfA Florida dfB–fuzzylink() function longer returns match record; blocking variables must match exactly function link two records together. can specify many blocking variables needed inputting column names vector. function returns additional columns along merged dataframe. column match_probability reports model’s estimated probability pair records refer entity. column used aid validation can used computing weighted averages record dfA matched multiple records dFB. columns sim jw string distance measures model uses predict whether two records match. included blocking.variables function call, column called block ID variable denoting block records belong .","code":"dfA <- tribble(~name, ~state, ~age,                'Joe Biden', 'Delaware', 81,                'Donald Trump', 'New York', 77,                'Barack Obama', 'Illinois', 62,                'George W. Bush', 'Texas', 77,                'Bill Clinton', 'Arkansas', 77)  dfB <- tribble(~name, ~state, ~hobby,                'Joseph Robinette Biden', 'Delaware', 'Football',                'Donald John Trump ', 'Florida', 'Golf',                'Barack Hussein Obama', 'Illinois', 'Basketball',                'George Walker Bush', 'Texas', 'Reading',                'William Jefferson Clinton', 'Arkansas', 'Saxophone',                'George Herbert Walker Bush', 'Texas', 'Skydiving',                'Biff Tannen', 'California', 'Bullying',                'Joe Riley', 'South Carolina', 'Jogging') df <- fuzzylink(dfA, dfB,                  by = 'name',                 blocking.variables = 'state',                 record_type = 'person') df #>                A                         B       sim block        jw #> 1      Joe Biden    Joseph Robinette Biden 0.7665511     1 0.7208273 #> 2   Barack Obama      Barack Hussein Obama 0.8458046     3 0.9200000 #> 3 George W. Bush        George Walker Bush 0.8447483     4 0.9301587 #> 4   Bill Clinton William Jefferson Clinton 0.8731902     5 0.5788889 #> 5   Donald Trump                      <NA>        NA    NA        NA #>   match_probability    state validated age      hobby #> 1                 1 Delaware       Yes  81   Football #> 2                 1 Illinois       Yes  62 Basketball #> 3                 1    Texas       Yes  77    Reading #> 4                 1 Arkansas       Yes  77  Saxophone #> 5                NA New York      <NA>  77       <NA>"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"under-the-hood","dir":"","previous_headings":"","what":"Under The Hood","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"’d like know details fuzzylink() works, can read accompanying research paper. section, ’ll take look hood previous example, walking steps fuzzylink() takes join two dataframes.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"step-1-embedding","dir":"","previous_headings":"Under The Hood","what":"Step 1: Embedding","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"First, function encodes unique string dfA dfB 256-dimensional vector called embedding. can learn embeddings , basic idea represent text using vector real-valued numbers, two vectors close one another space similar meanings.","code":"library(tidyverse)  strings_A <- unique(dfA$name) strings_B <- unique(dfB$name) all_strings <- unique( c(strings_A, strings_B) ) embeddings <- get_embeddings(all_strings)  dim(embeddings) #> [1]  13 256 head(embeddings['Bill Clinton',]) #> [1]  0.08031169  0.07614738 -0.01617801 -0.07958458 -0.09815873 -0.04967427"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"step-2-similarity-scores","dir":"","previous_headings":"Under The Hood","what":"Step 2: Similarity Scores","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"Next, compute cosine similarity name pair. measure closely related two pieces text , 0 completely unrelated 1 identical. include blocking.variables call fuzzylink(), function consider within-block name pairs (.e. compute similarity scores records exact match blocking variable). strongly recommend blocking wherever possible, significantly reduces cost speeds computation.","code":"sim <- get_similarity_matrix(embeddings, strings_A, strings_B) sim #>                Joseph Robinette Biden Donald John Trump  Barack Hussein Obama #> Joe Biden                   0.7665511          0.5532816            0.5309110 #> Donald Trump                0.4316448          0.8388565            0.4477471 #> Barack Obama                0.5171871          0.4756583            0.8458046 #> George W. Bush              0.4942466          0.4877767            0.5681277 #> Bill Clinton                0.4886684          0.5037386            0.5174360 #>                George Walker Bush William Jefferson Clinton #> Joe Biden               0.5094280                 0.5426318 #> Donald Trump            0.4805295                 0.4462709 #> Barack Obama            0.4854634                 0.5131122 #> George W. Bush          0.8447483                 0.6113368 #> Bill Clinton            0.6232500                 0.8731912 #>                George Herbert Walker Bush Biff Tannen Joe Riley #> Joe Biden                       0.4701124   0.3016349 0.3906386 #> Donald Trump                    0.3942993   0.3438548 0.2328768 #> Barack Obama                    0.4243879   0.2546999 0.3480991 #> George W. Bush                  0.7335260   0.2459214 0.3606344 #> Bill Clinton                    0.5950811   0.2214671 0.3194544"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"step-3-create-a-training-set","dir":"","previous_headings":"Under The Hood","what":"Step 3: Create a Training Set","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"like use cosine similarity scores predict whether two names refer entity. order , need first create labeled dataset fit statistical model. get_training_set() function selects sample name pairs labels using following prompt GPT-3.5 (brackets denote input variables).","code":"Decide if the following two names refer to the same {record_type}. {instructions} Think carefully. Respond \"Yes\" or \"No\".'  Name A: {A} Name B: {B} Response: train <- get_training_set(list(sim), record_type = 'person') train #> # A tibble: 40 × 5 #>    A              B                              sim    jw match #>    <fct>          <fct>                        <dbl> <dbl> <chr> #>  1 Donald Trump   \"Biff Tannen\"                0.344 0.399 No    #>  2 Donald Trump   \"William Jefferson Clinton\"  0.446 0.372 No    #>  3 Bill Clinton   \"George Herbert Walker Bush\" 0.595 0.371 No    #>  4 Donald Trump   \"George Walker Bush\"         0.481 0.5   No    #>  5 George W. Bush \"Joe Riley\"                  0.361 0.410 No    #>  6 George W. Bush \"George Herbert Walker Bush\" 0.734 0.870 No    #>  7 Bill Clinton   \"William Jefferson Clinton\"  0.873 0.579 Yes   #>  8 Joe Biden      \"William Jefferson Clinton\"  0.543 0.524 No    #>  9 Bill Clinton   \"Donald John Trump \"         0.504 0.465 No    #> 10 Donald Trump   \"George Herbert Walker Bush\" 0.394 0.344 No    #> # ℹ 30 more rows"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"step-4-fit-model","dir":"","previous_headings":"Under The Hood","what":"Step 4: Fit Model","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"Next, fit logistic regression model train dataset, can map similarity scores onto probability two records match. use cosine similarity (sim) measure lexical similarity (jw) predictors model. Append predictions name pair dfA dfB.","code":"model <- glm(as.numeric(match == 'Yes') ~ sim + jw,               data = train,              family = 'binomial') # create a dataframe with each name pair df <- sim |>    reshape2::melt() |>    set_names(c('A', 'B', 'sim')) |>    # compute lexical similarity measures for each name pair   mutate(jw = stringdist::stringsim(A, B, method = 'jw', p = 0.1))  df$match_probability <- predict(model, df, type = 'response')  head(df) #>                A                      B       sim        jw match_probability #> 1      Joe Biden Joseph Robinette Biden 0.7665511 0.7208273      1.000000e+00 #> 2   Donald Trump Joseph Robinette Biden 0.4316448 0.4217172      2.220446e-16 #> 3   Barack Obama Joseph Robinette Biden 0.5171871 0.4191919      2.220446e-16 #> 4 George W. Bush Joseph Robinette Biden 0.4942466 0.5200216      2.220446e-16 #> 5   Bill Clinton Joseph Robinette Biden 0.4886684 0.4797980      2.220446e-16 #> 6      Joe Biden     Donald John Trump  0.5532816 0.4444444      2.220446e-16"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"step-5-validate-uncertain-matches","dir":"","previous_headings":"Under The Hood","what":"Step 5: Validate Uncertain Matches","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"now dataset estimated match probabilities pair records dfA dfB. stop just report match probabilities. larger datasets can get better results conduct final validation step. name pair within range estimated match probabilities (default 0.1 0.95), use GPT-4 prompt check whether name pair match. labeled pairs added training dataset, logistic regression model refined, repeat process matches left validate. point, every record dfA either linked record dfB candidate matches dfB estimated probability higher threshold. Note , default, fuzzylink() function validate 100,000 name pairs step. setting reduces cost runtime (see “Note Cost” ), users wish validate name pairs within larger datasets can increase cap using max_validations argument.","code":"# find all unlabeled name pairs within a range of match probabilities matches_to_validate <- df |>    left_join(train, by = c('A', 'B', 'sim')) |>    filter(match_probability > 0.1,           match_probability < 0.95,          is.na(match))  while(nrow(matches_to_validate) > 0){      # validate matches using LLM prompt   matches_to_validate$match <- check_match(matches_to_validate$A,                                          matches_to_validate$B)      # append new labeled pairs to the train set   train <- train |>      bind_rows(matches_to_validate |>                select(A,B,sim,match))      # refine the model   model <- glm(as.numeric(match == 'Yes') ~ sim + jw,              data = train,              family = 'binomial')      # re-estimate match probabilities   df$match_probability <- predict(model, df, type = 'response')      # find all unlabeled name pairs within a range of match probabilities   matches_to_validate <- df |>      left_join(train, by = c('A', 'B', 'sim')) |>      filter(match_probability > 0.1,             match_probability < 0.95,            is.na(match))    }"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"step-6-link-datasets","dir":"","previous_headings":"Under The Hood","what":"Step 6: Link Datasets","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"Finally, take name pairs whose match probability higher user-specified threshold merge single dataset.","code":"matches <- df |>     # join with match labels from the training set     left_join(train |> select(A, B, match),               by = c('A', 'B')) |>     # only keep pairs that have been validated or have a match probability > 0.1     filter((match_probability > 0.1 & is.na(match)) | match == 'Yes') |>     right_join(dfA, by = c('A' = 'name'),                relationship = 'many-to-many') |>     left_join(dfB, by = c('B' = 'name'),                      relationship = 'many-to-many')  matches #>                A                         B       sim        jw #> 1      Joe Biden    Joseph Robinette Biden 0.7665511 0.7208273 #> 2   Donald Trump        Donald John Trump  0.8388565 0.9333333 #> 3   Barack Obama      Barack Hussein Obama 0.8458046 0.9200000 #> 4 George W. Bush        George Walker Bush 0.8447483 0.9301587 #> 5   Bill Clinton William Jefferson Clinton 0.8731912 0.5788889 #>   match_probability match  state.x age  state.y      hobby #> 1                 1   Yes Delaware  81 Delaware   Football #> 2                 1   Yes New York  77  Florida       Golf #> 3                 1   Yes Illinois  62 Illinois Basketball #> 4                 1   Yes    Texas  77    Texas    Reading #> 5                 1   Yes Arkansas  77 Arkansas  Saxophone"},{"path":"https://joeornstein.github.io/software/fuzzylink/index.html","id":"a-note-on-cost","dir":"","previous_headings":"","what":"A Note On Cost","title":"Probabilistic Record Linkage Using PreTrained Text Embeddings","text":"fuzzylink() function makes several calls OpenAI API—charges per-token fee—monetary cost associated use. Based package defaults API pricing March 2024, table approximate costs merging datasets various sizes. Note cost scales quickly size dfA dfB, costly complete LLM prompts validation retrieve embeddings. particularly large datasets, one can reduce costs using GPT-3.5 (model = 'gpt-3.5-turbo'), blocking (blocking.variables), reducing maximum number validations (max_validations).","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 fuzzylink authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/check_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether two strings match with an LLM prompt. — check_match","title":"Test whether two strings match with an LLM prompt. — check_match","text":"Test whether two strings match LLM prompt.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/check_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether two strings match with an LLM prompt. — check_match","text":"","code":"check_match(   string1,   string2,   model = \"gpt-3.5-turbo-instruct\",   record_type = \"entity\",   instructions = NULL,   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\"),   parallel = TRUE )"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/check_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether two strings match with an LLM prompt. — check_match","text":"string1 string vector strings string2 string vector strings model LLM prompt; defaults 'gpt-3.5-turbo-instruct' record_type character describing type entity string1 string2 represent. singular noun (e.g. \"person\", \"organization\", \"interest group\", \"city\"). instructions string containing additional instructions include LLM prompt. openai_api_key OpenAI API key. default, looks system environment variable called \"OPENAI_API_KEY\" (recommended option). Otherwise, prompt enter API key argument. parallel TRUE submit API requests parallel. Setting FALSE can reduce rate limit errors expense longer runtime.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/check_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether two strings match with an LLM prompt. — check_match","text":"vector length string1 string2. \"Yes\" pair strings match, \"\" otherwise.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/check_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether two strings match with an LLM prompt. — check_match","text":"","code":"check_match('UPS', 'United Parcel Service') #> [1] \"Yes\" check_match('UPS', 'United States Postal Service') #> [1] \"No\" check_match(c('USPS', 'USPS', 'USPS'),             c('Post Office', 'United Parcel', 'US Postal Service')) #> [1] \"Yes\" \"No\"  \"Yes\""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the dot product between two vectors — dot","title":"Compute the dot product between two vectors — dot","text":"Compute dot product two vectors","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the dot product between two vectors — dot","text":"","code":"dot(vec1, vec2)"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the dot product between two vectors — dot","text":"vec1 numeric vector vec2 Another numeric vector","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the dot product between two vectors — dot","text":"numeric","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/dot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the dot product between two vectors — dot","text":"","code":"dot(c(0,1), c(1,0)) #> [1] 0"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/fuzzylink.html","id":null,"dir":"Reference","previous_headings":"","what":"Probabilistic Record Linkage Using Pretrained Text Embeddings — fuzzylink","title":"Probabilistic Record Linkage Using Pretrained Text Embeddings — fuzzylink","text":"Probabilistic Record Linkage Using Pretrained Text Embeddings","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/fuzzylink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probabilistic Record Linkage Using Pretrained Text Embeddings — fuzzylink","text":"","code":"fuzzylink(   dfA,   dfB,   by,   blocking.variables = NULL,   verbose = TRUE,   record_type = \"entity\",   instructions = NULL,   model = \"gpt-3.5-turbo-instruct\",   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\"),   embedding_dimensions = 256,   embedding_model = \"text-embedding-3-large\",   fmla = match ~ sim + jw,   max_validations = 1e+05,   p = c(0.1, 0.95),   k = 0,   parallel = TRUE,   return_all_pairs = FALSE )"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/fuzzylink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probabilistic Record Linkage Using Pretrained Text Embeddings — fuzzylink","text":"dfA, dfB pair data frames data frame extensions (e.g. tibbles) character denoting name variable use fuzzy matching blocking.variables character vector variables must match exactly order match two records verbose TRUE print progress updates, FALSE output record_type character describing type entity variable represents. singular noun (e.g. \"person\", \"organization\", \"interest group\", \"city\"). instructions string containing additional instructions include LLM prompt validation. model LLM prompt validating matches; defaults 'gpt-3.5-turbo-instruct' openai_api_key OpenAI API key. default, looks system environment variable called \"OPENAI_API_KEY\" (recommended option). Otherwise, prompt enter API key argument. embedding_dimensions dimension embedding vectors retrieve. Defaults 256 embedding_model pretrained embedding model use; defaults 'text-embedding-3-large' (OpenAI), also accept 'mistral-embed' (Mistral). fmla default, logistic regression model predicts whether two records match linear combination embedding similarity Jaro-Winkler similarity (match ~ sim + jw). Change input alternate specifications. max_validations maximum number LLM prompts submit validation stage. Defaults 100,000 p range estimated match probabilities within fuzzylink() validate record pairs using LLM prompt. Defaults c(0.1, 0.95) k Number nearest neighbors validate records dfA identified matches. Higher values may improve recall expense precision. Defaults 0 parallel TRUE submit API requests parallel. Setting FALSE can reduce rate limit errors expense longer runtime. return_all_pairs TRUE, returns every within-block record pair dfA dfB, just validated pairs. Defaults FALSE.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/fuzzylink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probabilistic Record Linkage Using Pretrained Text Embeddings — fuzzylink","text":"dataframe rows dfA joined matches dfB","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/fuzzylink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probabilistic Record Linkage Using Pretrained Text Embeddings — fuzzylink","text":"","code":"dfA <- data.frame(state.x77) dfA$name <- rownames(dfA) dfB <- data.frame(name = state.abb, state.division) df <- fuzzylink(dfA, dfB,                 by = 'name',                 record_type = 'US state government',                 instructions = 'The first dataset contains full US state names. The second dataset contains US postal codes.') #> Retrieving 100 embeddings (4:24:20 PM) #>  #> Computing similarity matrix (4:24:21 PM) #>  #> Labeling training set (4:24:21 PM) #>  #> Fitting model (4:24:23 PM) #>  #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Linking datasets (4:24:23 PM) #>  #> Validating 18 matches (4:24:23 PM) #>  #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Done! (4:24:24 PM)"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_embeddings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pretrained text embeddings — get_embeddings","title":"Get pretrained text embeddings — get_embeddings","text":"Get pretrained text embeddings OpenAI Mistral API. Automatically batches requests handle rate limits.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_embeddings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pretrained text embeddings — get_embeddings","text":"","code":"get_embeddings(   text,   model = \"text-embedding-3-large\",   dimensions = 256,   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\"),   parallel = TRUE )"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_embeddings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pretrained text embeddings — get_embeddings","text":"text character vector model embedding model use. Defaults 'text-embedding-3-large'. dimensions dimension embedding vectors return. Defaults 256. Note 'mistral-embed' model always return 1024 vectors. openai_api_key OpenAI API key. default, looks system environment variable called \"OPENAI_API_KEY\" (recommended option). Otherwise, prompt enter API key argument. parallel TRUE submit API requests parallel. Setting FALSE can reduce rate limit errors expense longer runtime.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_embeddings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get pretrained text embeddings — get_embeddings","text":"matrix embedding vectors (one per row).","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_embeddings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get pretrained text embeddings — get_embeddings","text":"","code":"embeddings <- get_embeddings(c('dog', 'cat', 'canine', 'feline')) embeddings['dog',] |> dot(embeddings['canine',]) #> [1] 0.5828258 embeddings['dog',] |> dot(embeddings['feline',]) #> [1] 0.4447465"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_similarity_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create matrix of embedding similarities — get_similarity_matrix","title":"Create matrix of embedding similarities — get_similarity_matrix","text":"Create matrix pairwise similarities string strings_A strings_B.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_similarity_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create matrix of embedding similarities — get_similarity_matrix","text":"","code":"get_similarity_matrix(embeddings, strings_A = NULL, strings_B = NULL)"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_similarity_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create matrix of embedding similarities — get_similarity_matrix","text":"embeddings matrix text embeddings strings_A string vector strings_B string vector","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_similarity_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create matrix of embedding similarities — get_similarity_matrix","text":"matrix cosine similarities embeddings strings_A embeddings strings_B","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_similarity_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create matrix of embedding similarities — get_similarity_matrix","text":"","code":"embeddings <- get_embeddings(c('UPS', 'USPS', 'Postal Service')) get_similarity_matrix(embeddings) #>                      UPS      USPS Postal Service #> UPS            1.0000002 0.7534348      0.6256223 #> USPS           0.7534348 0.9999999      0.8407916 #> Postal Service 0.6256223 0.8407916      1.0000000 get_similarity_matrix(embeddings, 'Postal Service') #>                      UPS      USPS Postal Service #> Postal Service 0.6256223 0.8407916              1 get_similarity_matrix(embeddings, 'Postal Service', c('UPS', 'USPS')) #>                      UPS      USPS #> Postal Service 0.6256223 0.8407916"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_training_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a training set — get_training_set","title":"Create a training set — get_training_set","text":"Creates training set list similarity matrices labels using zero-shot GPT prompt.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_training_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a training set — get_training_set","text":"","code":"get_training_set(   sim,   num_bins = 50,   samples_per_bin = 10,   n = 500,   record_type = \"entity\",   instructions = NULL,   model = \"gpt-3.5-turbo-instruct\",   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\"),   parallel = TRUE )"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_training_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a training set — get_training_set","text":"sim matrix similarity scores num_bins Number bins split similarity scores stratified random sampling (defaults 50) samples_per_bin Number string pairs sample bin (defaults 5) n Sample size training dataset record_type character describing type entity rows columns sim represent. singular noun (e.g. \"person\", \"organization\", \"interest group\", \"city\"). instructions string containing additional instructions include LLM prompt validation. model OpenAI model prompt; defaults 'gpt-3.5-turbo-instruct' openai_api_key OpenAI API key. default, looks system environment variable called \"OPENAI_API_KEY\" (recommended option). Otherwise, prompt enter API key argument. parallel TRUE submit API requests parallel. Setting FALSE can reduce rate limit errors expense longer runtime.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/get_training_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a training set — get_training_set","text":"dataset string pairs B, along match column indicating whether match.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/hand_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Hand Label A Dataset — hand_label","title":"Hand Label A Dataset — hand_label","text":"function prompts user manually label set name pairs R console.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/hand_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hand Label A Dataset — hand_label","text":"","code":"hand_label(df)"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/hand_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hand Label A Dataset — hand_label","text":"df dataframe column called column called B","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/hand_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hand Label A Dataset — hand_label","text":"labeled dataframe (match column)","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/mistral_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Install a MISTRAL API KEY in Your .Renviron File for Repeated Use — mistral_api_key","title":"Install a MISTRAL API KEY in Your .Renviron File for Repeated Use — mistral_api_key","text":"function add Mistral API key .Renviron file can called securely without stored code. installed key, can called time typing Sys.getenv(\"MISTRAL_API_KEY\") automatically called package functions. .Renviron file, function create one . already .Renviron file, function append key existing file, making backup original file disaster recovery purposes.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/mistral_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install a MISTRAL API KEY in Your .Renviron File for Repeated Use — mistral_api_key","text":"","code":"mistral_api_key(key, overwrite = FALSE, install = FALSE)"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/mistral_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install a MISTRAL API KEY in Your .Renviron File for Repeated Use — mistral_api_key","text":"key API key provided Mistral formated quotes. key can acquired https://console.mistral.ai/api-keys/ overwrite set TRUE, overwrite existing MISTRAL_API_KEY already .Renviron file. install TRUE, install key .Renviron file use future sessions.  Defaults FALSE.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/mistral_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install a MISTRAL API KEY in Your .Renviron File for Repeated Use — mistral_api_key","text":"","code":"if (FALSE) { # \\dontrun{ mistral_api_key(\"111111abc\", install = TRUE) # First time, reload your environment so you can use the key without restarting R. readRenviron(\"~/.Renviron\") # You can check it with: Sys.getenv(\"MISTRAL_API_KEY\") } # }  if (FALSE) { # \\dontrun{ # If you need to overwrite an existing key: mistral_api_key(\"111111abc\", overwrite = TRUE, install = TRUE) # First time, reload your environment so you can use the key without restarting R. readRenviron(\"~/.Renviron\") # You can check it with: Sys.getenv(\"MISTRAL_API_KEY\") } # }"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/openai_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Install an OPENAI API KEY in Your .Renviron File for Repeated Use — openai_api_key","title":"Install an OPENAI API KEY in Your .Renviron File for Repeated Use — openai_api_key","text":"function add OpenAI API key .Renviron file can called securely without stored code. installed key, can called time typing Sys.getenv(\"OPENAI_API_KEY\") automatically called package functions. .Renviron file, function create one . already .Renviron file, function append key existing file, making backup original file disaster recovery purposes.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/openai_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install an OPENAI API KEY in Your .Renviron File for Repeated Use — openai_api_key","text":"","code":"openai_api_key(key, overwrite = FALSE, install = FALSE)"},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/openai_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install an OPENAI API KEY in Your .Renviron File for Repeated Use — openai_api_key","text":"key API key provided OpenAI formated quotes. key can acquired https://platform.openai.com/api-keys overwrite set TRUE, overwrite existing OPENAI_API_KEY already .Renviron file. install TRUE, install key .Renviron file use future sessions.  Defaults FALSE.","code":""},{"path":"https://joeornstein.github.io/software/fuzzylink/reference/openai_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install an OPENAI API KEY in Your .Renviron File for Repeated Use — openai_api_key","text":"","code":"if (FALSE) { # \\dontrun{ openai_api_key(\"111111abc\", install = TRUE) # First time, reload your environment so you can use the key without restarting R. readRenviron(\"~/.Renviron\") # You can check it with: Sys.getenv(\"OPENAI_API_KEY\") } # }  if (FALSE) { # \\dontrun{ # If you need to overwrite an existing key: openai_api_key(\"111111abc\", overwrite = TRUE, install = TRUE) # First time, reload your environment so you can use the key without restarting R. readRenviron(\"~/.Renviron\") # You can check it with: Sys.getenv(\"OPENAI_API_KEY\") } # }"}]
